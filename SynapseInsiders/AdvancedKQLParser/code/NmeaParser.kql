// ===========================================================================================================
// ========================= Section 1: Table creation ============== ========================================
// ===========================================================================================================
.execute database script <|
    .create table ['nmeaLanding']  (['data']:string) // create table
    .alter table nmeaLanding  folder "nmea.tables" // we add a folder name to our table to make things tidy

// ===========================================================================================================
// ========================= Section 2: PreParse function object creation ====================================
// ===========================================================================================================
.create-or-alter function with 
    (
         folder = "nmea.parsing"
        ,docstring = "This function preParses the messages and provide the required routing data for downstream processing"
        ,skipvalidation = "false"
        //
    ) f_PreParseNmea() 
{
// ===========================================================================================================
// ========================= Kusto Query language NMEA message parser ========================================
// ===========================================================================================================
// == Date Created: 2023-01-22                                                                              ==
// == Author:       Gilles L'HÃ©rault                                                                        ==
// == References:   https://gpsd.gitlab.io/gpsd/NMEA.html#_nmea_standard_sentences                          ==
// ===========================================================================================================
// == This script declares a few variables to start and a few user defined function design to make the      ==
// == code more readable. UDFs are prefixed with a "f_" for easy of identification when reading the code    ==
// == The first few "let" statement create "Dynamic" datatypes that will hold an object or more precisly    ==
// == a JSON property bag that represent the data structures of each known NMEA message. We will use        == 
// == this later when we split the messages using the comma delimiter and we will map each element to       ==
// == their respective schema column. This information has been obtained from various publicly available    ==
// == web sites referenced above.                                                                           ==
// ===========================================================================================================
//
// ===========================================================================================================
// == Then we create the "Struct", the data structures to help us shape the different NMEA sentences        ==
// ===========================================================================================================
let ggaStruct = dynamic
                    (
                        [
                            'TalkerID','FixTime','Latitude','LatitudeHemisphere','Longitude'
                           ,'LongitudePosition','QualityIndicator','SatellitesInUse','HorizontalDilution'
                           ,'AntennaAltitude','AntennaAltitudeUnit','GeoidalSeparation','GeoidalSeparationUnit'
                           ,'AgeOfDifferentialData','DifferentialReferenceStationID', 'Checksum'
                        ]
                    );
let rmcStruct = dynamic
                    (
                        [
                             'TalkerID','FixTime','Status','Latitude','LatitudeHemisphere','Longitude'
                            ,'LongitudePosition','SpeedKnots','TrackAngle','Date','MagneticVariationDegrees'
                            ,'MagneticVariationDirection','Checksum'
                        ]
                    );
// ===========================================================================================================================
// == Section 2.1 - Begin user defined functions section =====================================================================
// ===========================================================================================================================
// == PreFligh in-line function  =============================================================================================
// == This function will parse the message at a coarse level, i.e. extracting the fields that are always there and that we 
// == need for routing and actual field parsing.
// ===========================================================================================================================
let f_PreFlightParse = (NmeaLine:string) 
    {   // We wrapup our field definition with a check to see if it starts with $ to make sure the string is indeed an nmea 
        // sentence and we extract the talker id first (first 2 character after the $
        let MyTalkerId = iif(NmeaLine startswith "$",substring(NmeaLine,1,2),'Not an nmea sentence');
        // Then we get the sentence type 3 char after talker id
        let SentenceType = iif(NmeaLine startswith "$",substring(NmeaLine,3,3),'???');
        // We also grab the entire payload for later parsing. The payload is everything between the $ and the *
        let MessagePayload = iif(NmeaLine startswith "$",split((split(NmeaLine,'$').[1]),'*').[0],'');
        // we grab the checksum (two char after the * so we can write a function later on to check if the string is valid 
        // (future improvement to this parser)
        let Checksum = tostring(split(NmeaLine,"*").[1]);
        // We bag up the data as a set of key value pair. Bag_pack is used here so we can return a scalar dynamic field with 
        // our data. Since ADX does not let us use tabular expression inline with another tabular expression, we have to do 
        // this that way.
        bag_pack(
                 "TalkerId"         , MyTalkerId
                ,"SentenceType"     , SentenceType
                ,"MessagePayload"   , MessagePayload
                ,"Checksum"         , Checksum
                )
    }
;
// == End PreFLight in-line Function =========================================================================================
//
// ===========================================================================================================================
// == Section 2.2 - Parse GGA sentence Function ==============================================================================
// ===========================================================================================================================
// == This function will split the message payload and make an array of the fields. Then it will grabs the ggaStruct which 
// == contains the headers for a GGA message. Then we use bag_pack function to perform a "zip" operation where we pair up 
// == the headers and the extracted field
// == We will then have the ability to access the individual field using jsonpath in another query
// ===========================================================================================================================
let f_Process_gga = (MessagePayload:string) 
    {
        let MySplit = split(MessagePayload,',');
        let MyStruct = ggaStruct;
        bag_pack(
                 tostring(MyStruct.[0]) ,substring(tostring(MySplit.[0]),0,2)
                ,tostring(MyStruct.[1]) ,tostring(MySplit.[1]) 
                ,tostring(MyStruct.[2]) ,tostring(MySplit.[2]) 
                ,tostring(MyStruct.[3]) ,tostring(MySplit.[3])
                ,tostring(MyStruct.[4]) ,tostring(MySplit.[4])
                ,tostring(MyStruct.[5]) ,tostring(MySplit.[5])
                ,tostring(MyStruct.[6]) ,tostring(MySplit.[6])
                ,tostring(MyStruct.[7]) ,tostring(MySplit.[7])
                ,tostring(MyStruct.[8]) ,tostring(MySplit.[8])
                ,tostring(MyStruct.[9]) ,tostring(MySplit.[9])
                ,tostring(MyStruct.[10]),tostring(MySplit.[10])
                ,tostring(MyStruct.[11]),tostring(MySplit.[11])
                ,tostring(MyStruct.[12]),tostring(MySplit.[12])
                ,tostring(MyStruct.[13]),tostring(MySplit.[13])
                ,tostring(MyStruct.[14]),tostring(MySplit.[14])
            )
    };
// == End Parse GGA sentence Function ========================================================================================
// 
// ===========================================================================================================================
// == Section 2.3 Parse RMC sentence Function (see 2.2 for description =======================================================
// ===========================================================================================================================
let f_Process_rmc = (MessagePayload:string) 
    {
        let MySplit = split(MessagePayload,',');
        let MyStruct = rmcStruct;
        bag_pack(
                 tostring(MyStruct.[0]) ,substring(tostring(MySplit.[0]),0,2)
                ,tostring(MyStruct.[1]) ,tostring(MySplit.[1]) 
                ,tostring(MyStruct.[2]) ,tostring(MySplit.[2]) 
                ,tostring(MyStruct.[3]) ,tostring(MySplit.[3])
                ,tostring(MyStruct.[4]) ,tostring(MySplit.[4])
                ,tostring(MyStruct.[5]) ,tostring(MySplit.[5])
                ,tostring(MyStruct.[6]) ,tostring(MySplit.[6])
                ,tostring(MyStruct.[7]) ,tostring(MySplit.[7])
                ,tostring(MyStruct.[8]) ,tostring(MySplit.[8])
                ,tostring(MyStruct.[9]) ,tostring(MySplit.[9])
                ,tostring(MyStruct.[10]),tostring(MySplit.[10])
                ,tostring(MyStruct.[11]),tostring(MySplit.[11])
                ,tostring(MyStruct.[12]),tostring(MySplit.[12])
                ,tostring(MyStruct.[13]),tostring(MySplit.[13])
                ,tostring(MyStruct.[14]),tostring(MySplit.[14])
            )
    }    
;
// == End Parse RMC sentence Function ========================================================================================
// 
// == Section 2.4 preparse logic =============================================================================================
// see inline comment for explanation below
// ===========================================================================================================================
nmeaLanding
| extend  PreParseMsg    = f_PreFlightParse(data) // calling our function. This returns a dynamic field with our preparsed data
| extend  TalkerId       = tostring(PreParseMsg.TalkerId) // we extract the fields we need using jsonPath
         ,SentenceType   = tostring(PreParseMsg.SentenceType)
         ,MessagePayload = tostring(PreParseMsg.MessagePayload)
         ,Checksum       = tostring(PreParseMsg.Checksum)
| extend ParsedMessage   = case( // using this case expression, we invoke the correct function dependent on the sentencetype
                                 SentenceType == 'GGA' , f_Process_gga(PreParseMsg.MessagePayload)
                                ,SentenceType == 'RMC' , f_Process_rmc(PreParseMsg.MessagePayload)
                                // Add VTG and GSA type here
                                ,bag_pack("Error:","UnsupportedSentenceType","SentenceType",SentenceType) // some error handling
                                )                                                                         // Could be better...
} 

// 
// ===========================================================================================================================
// ====================== Section 3: PrParse table creation and update policy ================================================
// ===========================================================================================================================
//
// Create the table using the function as the template
.execute database script <|
    // we use the set-or-append trick to create the empty destination table
    .set-or-append nmeaPreParse <| f_PreParseNmea() | limit 0 
    // we add a folder name to our table to make things tidy
    .alter table nmeaPreParse folder "nmea.tables" 
    // we create an update policy that will run our preparse function everytime something is written to the landing table
    .alter table nmeaPreParse policy update  
    @'[{"IsEnabled": true, "Source": "nmeaLanding", "Query": "f_PreParseNmea()", "IsTransactional": false, "PropagateIngestionProperties": true}]'

// ===========================================================================================================================
// ====================== Section 4: helper functions=========================================================================
// ===========================================================================================================================
// Here we create a couple of function we will reuse later. Some of the data in NMEA need further processing to make sense of 
// them.
// ===========================================================================================================================
// ====================== Section 4.1 f_FormatTimeString function ============================================================
// ===========================================================================================================================
// create a function to derive time stamp from the partial hh:mm:ss time stamp in NMEA source
// note we assume using the day from datetime(now) pr the ingestion time is satisfactory.
// ===========================================================================================================================
.create-or-alter function with 
    (
         folder = "nmea.helper"
        ,docstring = "This function will reconstruct a true datetime using the partial time given in the nmea message"
        ,skipvalidation = "false"
        //
    ) f_FormatTimeString(MyTimeString:string, MyIngestionTime:datetime ) 
{
let FormatedNowDate       = tostring(format_datetime(MyIngestionTime, 'yyyy-MM-dd' ));
    let SplitTimeHours       = tostring(substring((split(MyTimeString,'.').[0]),0,2));
    let SplitTimeMinutes     = tostring(substring((split(MyTimeString,'.').[0]),2,2));
    let SplitTimeSeconds     = tostring(substring((split(MyTimeString,'.').[0]),4,2));
    let SplitTimeMiliseconds = tostring(split(MyTimeString,'.').[1]);
    todatetime(strcat_delim(' ',FormatedNowDate,(strcat_delim('.',(strcat_delim(':',SplitTimeHours,SplitTimeMinutes,SplitTimeSeconds)),SplitTimeMiliseconds))));
}


// ===========================================================================================================================
// ====================== Section 4.2 f_processLatitude function ============================================================
// ===========================================================================================================================
// create a function to convert the latitude information from the nmea message. Note we have to assign negative or positive
// value based on the hemisphere provided. This is why the function needs both parameters. Also the latitude is given in
// degrees.mm.mmmm so we have to separte degrees from the rest and then divide the minutes by 60 and then add it back to the 
// degrees. This will give us a standard latitude format. The last step is to assign +/- depending on the hemisphere 
// ===========================================================================================================================
.create-or-alter function with (folder = "nmea.helper", docstring = "This function will convert the latitude data and use the hemisphere info to return the correct value", skipvalidation = "true") 
    f_processLatitude(MyLatitude:string, MyHemishere:string) 
        {
            let MyLatSplit = split(MyLatitude,"."); // splitting to get ddmm and mmmmm on the other
            let MyMinutes = toreal(strcat(substring(MyLatSplit.[0], -2,2),'.',MyLatSplit.[1])); //negative substring to get the mm part of 
            //the ddmm. We are doing this from right to left because degrees can be 2 or 3 digits long (1-360)
            let MyDegrees = toreal(iif(strlen(tostring(MyLatSplit.[0])) == 4,substring(MyLatSplit.[0],0,2), substring(MyLatSplit.[0],0,3)));
            let MyRealLatitude = toreal(MyDegrees + MyMinutes/60);
        toreal(iif(MyHemishere != 'N', MyRealLatitude*-1,MyRealLatitude))
        } 

// ===========================================================================================================================
// ====================== Section 4.3 f_processLongitude function ============================================================
// ===========================================================================================================================
// See section 4.2 for details
// ===========================================================================================================================
.create-or-alter function with (folder = "nmea.helper", docstring = "This function will convert the longitude data and use the hemisphere info to return the correct value", skipvalidation = "true") 
    f_processLongitude(MyLongitude:string, MyHemishere:string) 
        {
            let MyLonSplit = split(MyLongitude,".");
            let MyMinutes = toreal(strcat(substring(MyLonSplit.[0], -2,2),'.',MyLonSplit.[1]));
            let MyDegrees = toreal(iif(strlen(tostring(MyLonSplit.[0])) == 4,substring(MyLonSplit.[0],0,2), substring(MyLonSplit.[0],0,3)));
            let MyRealLongitude = toreal(MyDegrees + MyMinutes/60);
        toreal(iif(MyHemishere != 'E', MyRealLongitude*-1,MyRealLongitude))
        } 

// ==========================================================================================================
// ====================== Section 5 GGA Parsing  ============================================================
// ==========================================================================================================
// == This is the function used for the update policy that will process and parse GGA message type
// ==========================================================================================================
.create-or-alter function with 
    (
         folder = "nmea.parsing"
        ,docstring = "This function fully parses the GGA messages according to the known schema from the specs"
        ,skipvalidation = "false"
        //
    ) f_parseGGA() 
{
// ==========================================================================================================
// == Section 5.1  Create GGA specific in-line function  ====================================================
// ==========================================================================================================
// Note the inline functions below can be thought of as reference tables to decodes the values
// Ideally they would be reference tables somewhere but we are looking to keep this parser as 
// portable as possible. In a production system where the number of items to decode may be large
// we recommend you build real materialized tables with these values and you lookup the decoded
// string using the lookup function.
let f_processGPSQualityIndicator= (MyGpsQualityIndicator:string) 
{
case(
        MyGpsQualityIndicator == '0', 'fix not available'
       ,MyGpsQualityIndicator == '1', 'GPS fix' 
       ,MyGpsQualityIndicator == '2', 'Differential GPS fix' 
       ,MyGpsQualityIndicator == '3', 'PPS fix' 
       ,MyGpsQualityIndicator == '4', 'Real Time Kinematic' 
       ,MyGpsQualityIndicator == '5', 'Float RTK' 
       ,MyGpsQualityIndicator == '6', 'estimated (dead reckoning)' 
       ,MyGpsQualityIndicator == '7', 'Manual input mode' 
       ,MyGpsQualityIndicator == '8', 'Simulation mode' 
       ,''
    )   
};
let f_processTalkerID = (MyTalkerId:string)
{
case( 
        MyTalkerId == 'GN', 'Combination of multiple satellite systems'
       ,MyTalkerId == 'GP', 'Global Positioning System receiver'
       ,'Unknown TalkerId'
     )  
};
let f_processSentenceType = (MySentenceType:string)
{
case( 
        MySentenceType == 'GGA', 'Global Positioning System Fix Data'
       ,MySentenceType == 'RMC', 'Recommended Minimum Navigation Information'
       ,'Unknown SentenceType'
     )  
};
nmeaPreParse
| where  SentenceType == 'GGA'
| extend IngestionTIme = ingestion_time()
| extend FixTime = tostring(ParsedMessage.FixTime)
        ,Latitude = ParsedMessage.Latitude
        ,LatitudeHemisphere=ParsedMessage.LatitudeHemisphere
        ,Longitude =ParsedMessage.Longitude
        ,LongitudePosition=ParsedMessage.LongitudePosition
        ,QualityIndicator=ParsedMessage.QualityIndicator
        ,toint(SatellitesInUse=ParsedMessage.SatellitesInUse)
        ,toreal(HorizontalDilution=ParsedMessage.HorizontalDilution)
        ,toreal(AntennaAltitude=ParsedMessage.AntennaAltitude)
        ,tostring(AntennaAltitudeUnit=ParsedMessage.AntennaAltitudeUnit)
        ,toreal(GeoidalSeparation =ParsedMessage.GeoidalSeparation)
        ,tostring(GeoidalSeparationUnit=ParsedMessage.GeoidalSeparationUnit)
        ,tostring(AgeOfDifferentialData=ParsedMessage.AgeOfDifferentialData)
        ,tostring(DifferentialReferenceStationID=ParsedMessage.DifferentialReferenceStationID)
| extend FixTime            = f_FormatTimeString(FixTime,IngestionTIme)
        ,Longitude          = f_processLongitude(Longitude,LongitudePosition)
        ,Latitude           = f_processLatitude(Latitude,LatitudeHemisphere)
        ,QualityIndicator   = f_processGPSQualityIndicator(QualityIndicator)
        ,TalkerId = f_processTalkerID(TalkerId)
        ,SentenceType = f_processSentenceType(SentenceType)
| project  
         IngestionTIme,TalkerId,SentenceType,FixTime,Latitude
        ,Longitude,QualityIndicator,SatellitesInUse,HorizontalDilution
        ,AntennaAltitude,AntennaAltitudeUnit,GeoidalSeparation,GeoidalSeparationUnit
        ,AgeOfDifferentialData,DifferentialReferenceStationID,Checksum
}

// ==========================================================================================================
// == Section 5.2  Create the destination table for the GGA Parsing function and update policy  =============
// ==========================================================================================================
// == This is the function used for the update policy that will process and parse GGA message type
// ==========================================================================================================

.execute database script <|
// Create the table using the function as the template
.set-or-append nmeaGGA <| f_parseGGA() | limit 0
// create the update policy binding the source table to the destination table
.alter table nmeaGGA policy update  
@'[{"IsEnabled": true, "Source": "nmeaPreParse", "Query": "f_parseGGA()", "IsTransactional": false, "PropagateIngestionProperties": true}]'
// assign the table to a folder for aesthetics
.alter table nmeaGGA folder "nmea.tables"

// ==========================================================================================================
// ====================== Section 6 RMC Parsing  ============================================================
// ==========================================================================================================
// == This is the function used for the update policy that will process and parse RMC message type
// ==========================================================================================================
.create-or-alter function with 
    (
         folder = "nmea.parsing"
        ,docstring = "This function fully parses the RMC messages according to the known schema from the specs"
        ,skipvalidation = "false"
        //
    ) f_parseRMC() 
{
// ==========================================================================================================
// == Section 6.1  Create RMC specific in-line function  ====================================================
// ==========================================================================================================
let f_processTalkerID = (MyTalkerId:string)
{
case( 
        MyTalkerId == 'GN', 'Combination of multiple satellite systems'
       ,MyTalkerId == 'GP', 'Global Positioning System receiver'
       ,'Unknown TalkerId'
     )  
};
let f_processSentenceType = (MySentenceType:string)
{
case( 
        MySentenceType == 'GGA', 'Global Positioning System Fix Data'
       ,MySentenceType == 'RMC', 'Recommended Minimum Navigation Information'
       ,'Unknown SentenceType'
     )  
};
let f_FormatNmeaDate = (MyNmeaDate:string) {
let CurrentMillenia = bin((toint(datetime_part('year',datetime(now)))),1000); 
let myYY = toint(substring(MyNmeaDate,4,2));
let myMM = tostring(substring(MyNmeaDate,2,2));
let myDD = tostring(substring(MyNmeaDate,0,2));
let MyYear = tostring(CurrentMillenia+myYY);
let MyFormatedNmeaDate = strcat_delim('-',MyYear,myMM,myDD);
todatetime(MyFormatedNmeaDate)
};
nmeaPreParse
| where  SentenceType == 'RMC'
| extend IngestionTIme = ingestion_time()
| extend FixTime = tostring(ParsedMessage.FixTime)
        ,Status = tostring(ParsedMessage.Status)
        ,Latitude = ParsedMessage.Latitude
        ,LatitudeHemisphere=ParsedMessage.LatitudeHemisphere
        ,Longitude =ParsedMessage.Longitude
        ,LongitudePosition=ParsedMessage.LongitudePosition
        ,MagneticVariationDegrees = toreal(ParsedMessage.MagneticVariationDegrees)
        ,MagneticVariationDirection = tostring(ParsedMessage.MagneticVariationDirection)
        ,TrackAngle= toreal(ParsedMessage.TrackAngle)
        ,SpeedKnots = toreal(ParsedMessage.SpeedKnots)
        ,Date = tostring(ParsedMessage.Date)
| extend FixTime        = f_FormatTimeString(FixTime,IngestionTIme)
        ,Longitude      = f_processLongitude(Longitude,LongitudePosition)
        ,Latitude       = f_processLatitude(Latitude,LatitudeHemisphere)        
        ,TalkerId       = f_processTalkerID(TalkerId)
        ,SentenceType   = f_processSentenceType(SentenceType)    
        ,NmeaDate       = f_FormatNmeaDate(Date)
        ,Status         = iif(Status == 'A', 'Valid', 'Warning')
| project  
         IngestionTIme,TalkerId,SentenceType,FixTime,Status, Latitude
        ,Longitude,SpeedKnots,TrackAngle,NmeaDate, MagneticVariationDegrees
        ,MagneticVariationDirection, Checksum
}

// ==========================================================================================================
// == Section 6.2  Create the destination table for the RMC Parsing function and update policy  =============
// ==========================================================================================================
// == This is the function used for the update policy that will process and parse RMC message type
// ==========================================================================================================

.execute database script <|
// create the target table for RMC messages using the set-or-append trick
.set-or-append nmeaRMC <| f_parseRMC() | limit 0
// assign the table to a folder for aesthetics
.alter table nmeaRMC folder "nmea.tables"
// create the update policy binding the source table to the destination table
.alter table nmeaRMC policy update  
@'[{"IsEnabled": true, "Source": "nmeaPreParse", "Query": "f_parseRMC()", "IsTransactional": false, "PropagateIngestionProperties": true}]'

//All done!



